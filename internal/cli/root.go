package cli

import (
	"fmt"
	"strings"

	"github.com/kanopy-platform/code-generator/pkg/generators"
	"github.com/kanopy-platform/code-generator/pkg/generators/builder"
	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	gengoargs "k8s.io/gengo/args"
)

type rootCommand struct {
	GeneratorArgs *gengoargs.GeneratorArgs
}

func WithGeneratorArgs(g *gengoargs.GeneratorArgs) func(*rootCommand) {
	return func(r *rootCommand) {
		r.GeneratorArgs = g
	}
}

func NewRootCommand(opts ...func(*rootCommand)) *cobra.Command {
	rootCommand := &rootCommand{
		GeneratorArgs: gengoargs.Default().WithoutDefaultFlagParsing(),
	}

	for _, opt := range opts {
		opt(rootCommand)
	}

	rootCommand.GeneratorArgs.OutputFileBaseName = "zz_generated_builders"
	// Settings for optimization:
	// - Do not include _test.go files (default)
	// - Add a header to generated files so gengo will ignore them to reduce parse time
	rootCommand.GeneratorArgs.IncludeTestFiles = false
	rootCommand.GeneratorArgs.GeneratedBuildTag = "ignore_autogenerated"

	cmd := &cobra.Command{
		Use:               "kanopy-codegen",
		Short:             "Kanopy Builder code generator",
		PersistentPreRunE: rootCommand.prerun,
		RunE:              rootCommand.runE,
	}

	rootCommand.setupFlags(cmd)

	return cmd
}

func (r *rootCommand) setupFlags(cmd *cobra.Command) {
	flags := cmd.PersistentFlags()
	flagLogLevel(flags)
	flagGeneratorArgs(flags, r.GeneratorArgs)

	customArgs := &generators.CustomArgs{}
	flagCustomGeneratorArgs(flags, customArgs)
	r.GeneratorArgs.CustomArgs = customArgs
}

func (r *rootCommand) prerun(cmd *cobra.Command, args []string) error {

	if err := viper.BindPFlags(cmd.PersistentFlags()); err != nil {
		return err
	}

	return setupGlobalLogLevel()
}

func (r *rootCommand) runE(cmd *cobra.Command, args []string) error {
	headerLines := []string{
		fmt.Sprintf("//go:build !%s\n", r.GeneratorArgs.GeneratedBuildTag),
		"/* DO NOT EDIT */",
		"/* autogenerated by kanopy-platform/code-generator */",
		"\n",
	}

	g := generators.New(&builder.BuilderPatternGeneratorFactory{OutputFileBaseName: r.GeneratorArgs.OutputFileBaseName},
		generators.WithBoilerplate(strings.Join(headerLines, "\n")))
	return r.GeneratorArgs.Execute(
		generators.NameSystems(),
		generators.DefaultNameSystem,
		g.Packages,
	)
}

func setupGlobalLogLevel() error {
	// set log level
	logLevel, err := log.ParseLevel(viper.GetString("log-level"))
	if err != nil {
		return err
	}

	log.SetLevel(logLevel)
	return nil
}
