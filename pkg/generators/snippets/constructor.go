package snippets

import (
	"k8s.io/gengo/generator"
	"k8s.io/gengo/types"
)

func GenerateEmptyConstructor(t *types.Type, returnPointer bool) (string, generator.Args) {
	args := generator.Args{
		"type": t,
	}
	argsForPointer(args, returnPointer)

	raw := `// New$.type|raw$ is an autogenerated constructor.
func New$.type|raw$() $.pointer$$.type|raw$ {
	o := $.ampersand$$.type|raw${}
	return o
}

`
	return raw, args
}

func GenerateConstructorForObjectMeta(t *types.Type, returnPointer bool) (string, generator.Args) {
	args := generator.Args{
		"type": t,
	}
	argsForPointer(args, returnPointer)

	raw := `// New$.type|raw$ is an autogenerated constructor.
func New$.type|raw$(name string) $.pointer$$.type|raw$ {
	o := $.ampersand$$.type|raw${}
	o.ObjectMeta.Name = name
	return o
}

`
	return raw, args
}

func argsForPointer(args generator.Args, usePointer bool) {
	if usePointer {
		args["pointer"] = "*"
		args["ampersand"] = "&"
	} else {
		args["pointer"] = ""
		args["ampersand"] = ""
	}
}
