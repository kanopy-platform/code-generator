package snippets

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"k8s.io/gengo/generator"
	"k8s.io/gengo/types"
)

func TestGenerateSetterForPrimitiveType(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	someStruct := newTestType(t, "SomeStruct")
	root := someStruct
	parent := getMemberFromType(t, someStruct, "SomeStruct", "ObjectMeta").Type
	member := getMemberFromType(t, someStruct, "SomeStruct", "ObjectMeta", "Name")

	tests := []struct {
		description       string
		isPointerReceiver bool
		want              string
	}{
		{
			description:       "use pointer receiver",
			isPointerReceiver: true,
			want: `// WithName is an autogenerated function
func (o *SomeStruct) WithName(in string) *SomeStruct {
	o.ObjectMeta.Name = in
	return o
}

`,
		},
		{
			description:       "use value receiver",
			isPointerReceiver: false,
			want: `// WithName is an autogenerated function
func (o SomeStruct) WithName(in string) SomeStruct {
	o.ObjectMeta.Name = in
	return o
}

`,
		},
	}

	for _, test := range tests {
		var b bytes.Buffer
		setter := NewSetter(root, parent, test.isPointerReceiver)
		sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
		sw.Do(setter.GenerateSetterForPrimitiveType(member))
		assert.NoError(t, sw.Error())
		assert.Equal(t, test.want, b.String())
	}
}

func TestGenerateSetterForMap(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	someStruct := newTestType(t, "SomeStruct")

	root := someStruct
	parent := getMemberFromType(t, someStruct, "SomeStruct", "ObjectMeta").Type
	member := getMemberFromType(t, someStruct, "SomeStruct", "ObjectMeta", "Labels")
	want := `// WithLabels is an autogenerated function
func (o *SomeStruct) WithLabels(in map[string]string) *SomeStruct {
	o.ObjectMeta.Labels = mergeMapStringString(o.ObjectMeta.Labels, in)
	return o
}

`
	var b bytes.Buffer
	setter := NewSetter(root, parent, true)
	sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
	sw.Do(setter.GenerateSetterForMap(member))
	assert.NoError(t, sw.Error())
	assert.Equal(t, want, b.String())
}

func TestGenerateSetterForMemberSlice(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	someStruct := newTestType(t, "SomeStruct")

	root := someStruct
	parent := getMemberFromType(t, someStruct, "SomeStruct").Type
	member := getMemberFromType(t, someStruct, "SomeStruct", "Strings")
	want := `// AppendStrings is an autogenerated function
func (o *SomeStruct) AppendStrings(in ...string) *SomeStruct {
	o.SomeStruct.Strings = append(o.SomeStruct.Strings, in...)
	return o
}

`
	var b bytes.Buffer
	setter := NewSetter(root, parent, true)
	sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
	sw.Do(setter.GenerateSetterForMemberSlice(member))
	assert.NoError(t, sw.Error())
	assert.Equal(t, want, b.String())
}

func TestGenerateSetterForEmbeddedSlice(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	someStruct := newTestType(t, "SomeStruct")
	cStruct := newTestType(t, "CStruct")

	root := someStruct
	parent := getMemberFromType(t, someStruct, "SomeStruct").Type
	member := getMemberFromType(t, someStruct, "SomeStruct", "CStructs")
	inputType := cStruct
	want := `// AppendCStructs is an autogenerated function
func (o *SomeStruct) AppendCStructs(in ...CStruct) *SomeStruct {
	for _, elem := range in {
		o.SomeStruct.CStructs = append(o.SomeStruct.CStructs, elem.CStruct)
	}
	return o
}

`
	var b bytes.Buffer
	setter := NewSetter(root, parent, true)
	sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
	sw.Do(setter.GenerateSetterForEmbeddedSlice(member, inputType))
	assert.NoError(t, sw.Error())
	assert.Equal(t, want, b.String())
}

func TestGenerateSetterForMemberStruct(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	someStruct := newTestType(t, "SomeStruct")

	root := someStruct
	parent := getMemberFromType(t, someStruct, "SomeStruct").Type
	member := getMemberFromType(t, someStruct, "SomeStruct", "AStruct")
	want := `// WithAStruct is an autogenerated function
func (o *SomeStruct) WithAStruct(in a.AStruct) *SomeStruct {
	o.SomeStruct.AStruct = in
	return o
}

`
	var b bytes.Buffer
	setter := NewSetter(root, parent, true)
	sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
	sw.Do(setter.GenerateSetterForMemberStruct(member))
	assert.NoError(t, sw.Error())
	assert.Equal(t, want, b.String())
}

func TestGenerateSetterForEmbeddedStruct(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	someStruct := newTestType(t, "SomeStruct")
	cStruct := newTestType(t, "CStruct")

	root := someStruct
	parent := getMemberFromType(t, someStruct, "SomeStruct").Type
	member := getMemberFromType(t, someStruct, "SomeStruct", "CStruct")
	inputType := cStruct
	want := `// WithCStruct is an autogenerated function
func (o *SomeStruct) WithCStruct(in CStruct) *SomeStruct {
	o.SomeStruct.CStruct = in.CStruct
	return o
}

`
	var b bytes.Buffer
	setter := NewSetter(root, parent, true)
	sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
	sw.Do(setter.GenerateSetterForEmbeddedStruct(member, inputType))
	assert.NoError(t, sw.Error())
	assert.Equal(t, want, b.String())
}

func TestGenerateSetterForPointerToBuiltinType(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	someStruct := newTestType(t, "SomeStruct")

	root := someStruct
	parent := getMemberFromType(t, someStruct, "SomeStruct").Type
	member := getMemberFromType(t, someStruct, "SomeStruct", "IntPtr")
	want := `// WithIntPtr is an autogenerated function
func (o *SomeStruct) WithIntPtr(in int) *SomeStruct {
	o.SomeStruct.IntPtr = &in
	return o
}

`
	var b bytes.Buffer
	setter := NewSetter(root, parent, true)
	sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
	sw.Do(setter.GenerateSetterForPointerToBuiltinType(member))
	assert.NoError(t, sw.Error())
	assert.Equal(t, want, b.String())
}

func TestFuncName(t *testing.T) {
	t.Parallel()

	tests := []struct {
		description string
		name        string
		kind        types.Kind
		want        string
	}{
		{
			description: "Setter for Builtin type",
			name:        "Name",
			kind:        types.Builtin,
			want:        "WithName",
		},
		{
			description: "Setter for Struct type",
			name:        "Struct",
			kind:        types.Struct,
			want:        "WithStruct",
		},
		{
			description: "Setter for Slice type",
			name:        "Slice",
			kind:        types.Slice,
			want:        "AppendSlice",
		},
	}

	for _, test := range tests {
		m := types.Member{
			Name: test.name,
			Type: &types.Type{
				Kind: test.kind,
			},
		}

		assert.Equal(t, test.want, funcName(m), test.description)
	}
}

func TestMemberAccessor(t *testing.T) {
	t.Parallel()

	someStruct := newTestType(t, "SomeStruct")
	root := someStruct

	tests := []struct {
		description string
		parent      *types.Type
		member      types.Member
		want        string
	}{
		{
			description: "Root and Parent are the same, access member directly",
			parent:      root,
			member:      getMemberFromType(t, someStruct, "SomeStruct", "AStruct"),
			want:        "AStruct",
		},
		{
			description: "Root and Parent are different, need intermediary to access member",
			parent:      getMemberFromType(t, someStruct, "SomeStruct", "ObjectMeta").Type,
			member:      getMemberFromType(t, someStruct, "SomeStruct", "ObjectMeta", "Name"),
			want:        "ObjectMeta.Name",
		},
	}

	for _, test := range tests {
		setter := NewSetter(root, test.parent, true)
		assert.Equal(t, test.want, setter.memberAccessor(test.member), test.description)
	}
}
