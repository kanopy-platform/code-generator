package snippets

import (
	"bytes"
	"errors"
	"testing"

	"github.com/kanopy-platform/code-generator/pkg/generators/snippets/testdata/a"
	"github.com/kanopy-platform/code-generator/pkg/generators/snippets/testdata/b"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"k8s.io/gengo/generator"
	"k8s.io/gengo/types"
)

func TestGenerateSetter(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	testType := newSampleTestType(t, "TestStruct")

	tests := []struct {
		ctx       *generator.Context
		root      *types.Type
		member    types.Member
		hasParent bool
		embedded  *types.Type
		wantErr   error
		want      string
	}{
		{
			// nil pointer t
			ctx:     ctx,
			root:    nil,
			wantErr: errors.New("nil pointer"),
		},
		{
			// test default setter
			ctx:       ctx,
			root:      testType,
			member:    testType.Members[0].Type.Members[a.MemberIndex_AStruct_ObjectMeta].Type.Members[b.MemberIndex_ObjectMeta_Name], // TestStruct -> AStruct -> ObjectMeta -> Name (string)
			hasParent: true,
			wantErr:   nil,
			want: `// WithName is an autogenerated setter function.
func (o *TestStruct) WithName(in string) *TestStruct {
o.TestStruct.Name = in
return o
}

`,
		},
		{
			// test default setter, no parent
			ctx:       ctx,
			root:      testType,
			member:    testType.Members[0].Type.Members[a.MemberIndex_AStruct_ObjectMeta].Type.Members[b.MemberIndex_ObjectMeta_Name], // TestStruct -> AStruct -> ObjectMeta -> Name (string)
			hasParent: false,
			wantErr:   nil,
			want: `// WithName is an autogenerated setter function.
func (o *TestStruct) WithName(in string) *TestStruct {
o.Name = in
return o
}

`,
		},
		{
			// test map setter
			ctx:       ctx,
			root:      testType,
			member:    testType.Members[0].Type.Members[a.MemberIndex_AStruct_ObjectMeta].Type.Members[b.MemberIndex_ObjectMeta_Labels], // TestStruct -> AStruct -> ObjectMeta -> Lables (map[string]string)
			hasParent: true,
			wantErr:   nil,
			want: `// WithLabels is an autogenerated setter function.
func (o *TestStruct) WithLabels(in map[string]string) *TestStruct {
o.TestStruct.Labels = mergeMapStringString(o.TestStruct.Labels, in)
return o
}

`,
		},
		{
			// test slice embedded type
			ctx:       ctx,
			root:      testType,
			member:    testType.Members[0].Type.Members[a.MemberIndex_AStruct_ComplexStructs], // TestStruct -> AStruct -> ComplexSlice ([]ComplexStruct)
			hasParent: true,
			embedded:  testType.Members[0].Type.Members[a.MemberIndex_AStruct_ComplexStructs].Type.Elem.Members[0].Type, // Embedded c.ComplexStruct
			wantErr:   nil,
			want: `// AppendComplexStructs is an autogenerated setter function.
func (o *TestStruct) AppendComplexStructs(in ...a.ComplexStruct) *TestStruct {
for _, elem := range in {
o.TestStruct.ComplexStructs = append(o.TestStruct.ComplexStructs, elem.ComplexStruct)
}
return o
}

`,
		},
		{
			// test slice builtin type
			ctx:       ctx,
			root:      testType,
			member:    testType.Members[0].Type.Members[a.MemberIndex_AStruct_Strings], // TestStruct -> AStruct -> Strings ([]string)
			hasParent: true,
			wantErr:   nil,
			want: `// AppendStrings is an autogenerated setter function.
func (o *TestStruct) AppendStrings(in ...string) *TestStruct {
o.TestStruct.Strings = append(o.TestStruct.Strings, in...)
return o
}

`,
		},
		{
			// test struct embedded type
			ctx:       ctx,
			root:      testType,
			member:    testType.Members[0].Type.Members[a.MemberIndex_AStruct_ComplexStruct], // TestStruct -> AStruct -> ComplexStruct
			hasParent: true,
			embedded:  testType.Members[0].Type.Members[a.MemberIndex_AStruct_ComplexStruct].Type.Members[0].Type, // Embedded c.ComplexStruct
			wantErr:   nil,
			want: `// WithComplexStruct is an autogenerated setter function.
func (o *TestStruct) WithComplexStruct(in a.ComplexStruct) *TestStruct {
o.TestStruct.ComplexStruct = in.ComplexStruct
return o
}

`,
		},
		{
			// test struct type, no embedded
			ctx:       ctx,
			root:      testType,
			member:    testType.Members[0].Type.Members[a.MemberIndex_AStruct_SimpleStruct], // TestStruct -> AStruct -> SimpleStruct
			hasParent: true,
			wantErr:   nil,
			want: `// WithSimpleStruct is an autogenerated setter function.
func (o *TestStruct) WithSimpleStruct(in a.SimpleStruct) *TestStruct {
o.TestStruct.SimpleStruct = in
return o
}

`,
		},
		{
			// test pointer to builtin
			ctx:       ctx,
			root:      testType,
			member:    testType.Members[0].Type.Members[a.MemberIndex_AStruct_IntPtr], // TestStruct -> AStruct -> IntPtr (*int)
			hasParent: true,
			wantErr:   nil,
			want: `// WithIntPtr is an autogenerated setter function.
func (o *TestStruct) WithIntPtr(in int) *TestStruct {
o.TestStruct.IntPtr = &in
return o
}

`,
		},
	}

	for _, test := range tests {
		var b bytes.Buffer
		err := GenerateSetter(&b, test.ctx, test.root, test.member, test.hasParent, test.embedded)
		if test.wantErr != nil {
			assert.Error(t, err)
		} else {
			assert.NoError(t, err)
			assert.Equal(t, test.want, b.String())
		}
	}
}

// type Setter struct {
// 	Template string
// 	Args     generator.Args
// }

// func getBuiltInMembersForType(in *types.Type) []types.Member {
// 	members := []types.Member{}
// 	for _, m := range in.Members {
// 		if m.Type.Kind == types.Builtin {
// 			members = append(members, m)
// 		}
// 	}
// 	return members
// }

// func setterPrimitives(in *types.Type, members []types.Member) []*Setter {
// 	s := []*Setter{}
// 	for _, m := range members {
// 		s = append(s, setterPrimitiveForMember(in, m))
// 	}
// 	return s
// }

// func setterPrimitiveForMember(parent *types.Type, m types.Member) *Setter {
// 	s := &Setter{Args: generator.Args{
// 		"type":       parent,
// 		"funcName":   funcName(m),
// 		"memberName": m.Name,
// 		"memberType": m.Type,
// 	}}
// 	var sb strings.Builder
// 	sb.WriteString("// $.funcName$ is an autogenerated setter function.\n")
// 	sb.WriteString("func (o *$.type|raw$) $.funcName$(in $.memberType|raw$) *$.type|raw$ {\n")
// 	sb.WriteString("o.$.memberName$ = in\n")
// 	sb.WriteString("return o\n")
// 	sb.WriteString("}\n\n")
// 	return s
// }

// func TestSampleType_SetterPrimitive(t *testing.T) {
// 	ctx, err := newTestGeneratorContext()
// 	assert.NoError(t, err)

// 	sample := newSampleTestType(t, "TestStruct")
// 	var b bytes.Buffer
// 	//err = GenerateSetter(&b, ctx, sample, sample.Members[0], false, nil)

// 	s := setterPrimitives(sample)

// 	err = writeSnippetWithArgs(&b, ctx, s.Template, s.Args)
// 	assert.NoError(t, err)
// 	assert.Contains(t, b.String(), "WithName(in string)")
// }
