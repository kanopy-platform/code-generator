package snippets

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"k8s.io/gengo/generator"
	"k8s.io/gengo/types"
)

func TestGenerateMarshalJSON(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	tests := []struct {
		ctx                            *generator.Context
		t                              *types.Type
		schemeGroupVersionPackageAlias string
		want                           string
	}{
		{
			ctx:                            ctx,
			t:                              newTestType(t, "SomeStruct"),
			schemeGroupVersionPackageAlias: "corev1",
			want: `// MarshalJSON is an autogenerated marshaling function, setting the TypeMeta.
func (o SomeStruct) MarshalJSON() ([]byte, error) {
	o.SomeStruct.TypeMeta = metav1.TypeMeta{Kind: "SomeStruct", APIVersion: corev1.SchemeGroupVersion.String()}
	return json.Marshal(o.SomeStruct)
}

`,
		},
	}

	for _, test := range tests {
		var b bytes.Buffer
		sw := generator.NewSnippetWriter(&b, test.ctx, "$", "$")
		sw.Do(GenerateMarshalJSON(test.t, test.schemeGroupVersionPackageAlias))
		assert.NoError(t, sw.Error())
		assert.Equal(t, test.want, b.String())
	}
}
