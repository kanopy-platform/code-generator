package snippets

import (
	"bytes"
	"errors"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"k8s.io/gengo/generator"
	"k8s.io/gengo/types"
)

var ctx *generator.Context

func TestMain(m *testing.M) {
	var err error

	ctx, err = newTestGeneratorContext()
	if err != nil {
		os.Exit(1)
	}

	os.Exit(m.Run())
}

func TestGenerateMarshalJSON(t *testing.T) {
	t.Parallel()

	tests := []struct {
		t                       *types.Type
		embeddedTypePackageName string
		wantErr                 error
		want                    string
	}{
		{
			// nil pointer
			t:                       nil,
			embeddedTypePackageName: "corev1",
			wantErr:                 errors.New("nil pointer"),
		},
		{
			t:                       newTestNamespaceType(),
			embeddedTypePackageName: "corev1",
			wantErr:                 nil,
			want: `// MarshalJSON is an autogenerated marshaling function, setting the TypeMeta.
func (o Namespace) MarshalJSON() ([]byte, error) {
o.Namespace.TypeMeta = metav1.TypeMeta{Kind: "Namespace", APIVersion: corev1.SchemeGroupVersion.String()}
return json.Marshal(o.Namespace)
}

`,
		},
	}

	for _, test := range tests {
		var b bytes.Buffer
		err := GenerateMarshalJSON(ctx, test.t, test.embeddedTypePackageName, &b)
		if test.wantErr != nil {
			assert.Error(t, err)
		} else {
			assert.NoError(t, err)
			assert.Equal(t, test.want, b.String())
		}
	}
}
