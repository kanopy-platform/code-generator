package snippets

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"k8s.io/gengo/generator"
	"k8s.io/gengo/types"
)

func TestGenerateEmptyConstructor(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	tests := []struct {
		description string
		testType    *types.Type
		want        string
	}{
		{
			description: "Constructor returns struct by value",
			testType:    newTestType(t, "ValueStruct"),
			want: `// NewValueStruct is an autogenerated constructor.
func NewValueStruct() ValueStruct {
	o := ValueStruct{}
	return o
}

`,
		},
		{
			description: "Constructor returns pointer to struct",
			testType:    newTestType(t, "SomeStruct"),
			want: `// NewSomeStruct is an autogenerated constructor.
func NewSomeStruct() *SomeStruct {
	o := &SomeStruct{}
	return o
}

`,
		},
	}

	for _, test := range tests {
		var b bytes.Buffer
		sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
		sw.Do(GenerateEmptyConstructor(test.testType))
		assert.NoError(t, sw.Error(), test.description)
		assert.Equal(t, test.want, b.String(), test.description)
	}
}

func TestGenerateConstructorForObjectMeta(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	tests := []struct {
		description string
		testType    *types.Type
		want        string
	}{
		{
			description: "Constructor returns struct by value",
			testType:    newTestType(t, "ValueStruct"),
			want: `// NewValueStruct is an autogenerated constructor.
func NewValueStruct(name string) ValueStruct {
	o := ValueStruct{}
	o.ObjectMeta.Name = name
	return o
}

`,
		},
		{
			description: "Constructor returns pointer to struct",
			testType:    newTestType(t, "SomeStruct"),
			want: `// NewSomeStruct is an autogenerated constructor.
func NewSomeStruct(name string) *SomeStruct {
	o := &SomeStruct{}
	o.ObjectMeta.Name = name
	return o
}

`,
		},
	}

	for _, test := range tests {
		var b bytes.Buffer
		sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
		sw.Do(GenerateConstructorForObjectMeta(test.testType))
		assert.NoError(t, sw.Error(), test.description)
		assert.Equal(t, test.want, b.String(), test.description)
	}
}

func TestArgsForPointer(t *testing.T) {
	t.Parallel()

	tests := []struct {
		description string
		usePointer  bool
		want        generator.Args
	}{
		{
			description: "do not add in pointer args",
			usePointer:  false,
			want: generator.Args{
				"pointer":   "",
				"ampersand": "",
			},
		},
		{
			description: "add in pointer args",
			usePointer:  true,
			want: generator.Args{
				"pointer":   "*",
				"ampersand": "&",
			},
		},
	}

	for _, test := range tests {
		args := generator.Args{}
		argsForPointer(args, test.usePointer)
		assert.Equal(t, test.want, args, test.description)
	}
}
