package snippets

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"k8s.io/gengo/generator"
)

func TestGenerateEmptyConstructor(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)
	testType := newTestType(t, "SomeStruct")

	tests := []struct {
		description   string
		returnPointer bool
		want          string
	}{
		{
			description:   "Constructor returns struct by value",
			returnPointer: false,
			want: `// NewSomeStruct is an autogenerated constructor.
func NewSomeStruct() SomeStruct {
	o := SomeStruct{}
	return o
}

`,
		},
		{
			description:   "Constructor returns pointer to struct",
			returnPointer: true,
			want: `// NewSomeStruct is an autogenerated constructor.
func NewSomeStruct() *SomeStruct {
	o := &SomeStruct{}
	return o
}

`,
		},
	}

	for _, test := range tests {
		var b bytes.Buffer
		sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
		sw.Do(GenerateEmptyConstructor(testType, test.returnPointer))
		assert.NoError(t, sw.Error(), test.description)
		assert.Equal(t, test.want, b.String(), test.description)
	}
}

func TestGenerateConstructorForObjectMeta(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)
	testType := newTestType(t, "SomeStruct")

	tests := []struct {
		description   string
		returnPointer bool
		want          string
	}{
		{
			description:   "Constructor returns struct by value",
			returnPointer: false,
			want: `// NewSomeStruct is an autogenerated constructor.
func NewSomeStruct(name string) SomeStruct {
	o := SomeStruct{}
	o.ObjectMeta.Name = name
	return o
}

`,
		},
		{
			description:   "Constructor returns pointer to struct",
			returnPointer: true,
			want: `// NewSomeStruct is an autogenerated constructor.
func NewSomeStruct(name string) *SomeStruct {
	o := &SomeStruct{}
	o.ObjectMeta.Name = name
	return o
}

`,
		},
	}

	for _, test := range tests {
		var b bytes.Buffer
		sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
		sw.Do(GenerateConstructorForObjectMeta(testType, test.returnPointer))
		assert.NoError(t, sw.Error(), test.description)
		assert.Equal(t, test.want, b.String(), test.description)
	}
}

func TestArgsForPointer(t *testing.T) {
	t.Parallel()

	tests := []struct {
		description string
		isPointer   bool
		want        generator.Args
	}{
		{
			description: "do not add in pointer args",
			isPointer:   false,
			want: generator.Args{
				"pointer":   "",
				"ampersand": "",
			},
		},
		{
			description: "add in pointer args",
			isPointer:   true,
			want: generator.Args{
				"pointer":   "*",
				"ampersand": "&",
			},
		},
	}

	for _, test := range tests {
		args := generator.Args{}
		argsForPointer(args, test.isPointer)
		assert.Equal(t, test.want, args, test.description)
	}
}
