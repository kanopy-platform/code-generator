package snippets

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"k8s.io/gengo/generator"
	"k8s.io/gengo/types"
)

func TestGenerateEmptyConstructor(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	tests := []struct {
		description     string
		testType        *types.Type
		pointerReceiver bool
		want            string
	}{
		{
			description:     "Constructor returns struct by value",
			testType:        newTestType(t, "SomeStruct"),
			pointerReceiver: false,
			want: `// NewSomeStruct is an autogenerated constructor.
func NewSomeStruct() SomeStruct {
	o := SomeStruct{}
	return o
}

`,
		},
		{
			description:     "Constructor returns pointer to struct",
			testType:        newTestType(t, "SomeStruct"),
			pointerReceiver: true,
			want: `// NewSomeStruct is an autogenerated constructor.
func NewSomeStruct() *SomeStruct {
	o := &SomeStruct{}
	return o
}

`,
		},
	}

	for _, test := range tests {
		var b bytes.Buffer
		sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
		sw.Do(GenerateEmptyConstructor(test.testType, test.pointerReceiver))
		assert.NoError(t, sw.Error(), test.description)
		assert.Equal(t, test.want, b.String(), test.description)
	}
}

func TestGenerateConstructorForObjectMeta(t *testing.T) {
	t.Parallel()

	ctx, err := newTestGeneratorContext()
	require.NoError(t, err)

	testType := newTestType(t, "SomeStruct")
	want := `// NewSomeStruct is an autogenerated constructor.
func NewSomeStruct(name string) *SomeStruct {
	o := &SomeStruct{}
	o.ObjectMeta.Name = name
	return o
}

`
	var b bytes.Buffer
	sw := generator.NewSnippetWriter(&b, ctx, "$", "$")
	sw.Do(GenerateConstructorForObjectMeta(testType))
	assert.NoError(t, sw.Error())
	assert.Equal(t, want, b.String())
}

func TestDefaultGeneratorArgs(t *testing.T) {
	t.Parallel()

	someStruct := newTestType(t, "SomeStruct")

	tests := []struct {
		description     string
		pointerReceiver bool
		want            generator.Args
	}{
		{
			description:     "value receiver",
			pointerReceiver: false,
			want: generator.Args{
				"type":      someStruct,
				"pointer":   "",
				"ampersand": "",
			},
		},
		{
			description:     "pointer receiver",
			pointerReceiver: true,
			want: generator.Args{
				"type":      someStruct,
				"pointer":   "*",
				"ampersand": "&",
			},
		},
	}

	for _, test := range tests {
		args := defaultGeneratorArgs(someStruct, test.pointerReceiver)
		assert.Equal(t, test.want, args, test.description)
	}
}
